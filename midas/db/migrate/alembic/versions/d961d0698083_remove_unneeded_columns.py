"""Remove unneeded columns

Revision ID: d961d0698083
Revises: 4815cccfb01b
Create Date: 2020-10-27 11:37:59.455985

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.sql import table
from midas.db import sqla


# revision identifiers, used by Alembic.
revision = 'd961d0698083'
down_revision = '4815cccfb01b'
branch_labels = None
depends_on = None


# Table definitions with necessary columns for data migrations
genomes = table(
    'genomes',
    sa.Column('id', sa.Integer(), primary_key=True),
    sa.Column('is_assembled', sa.Boolean()),
    sa.Column('ncbi_taxid', sa.Integer(), index=True),
    sa.Column('entrez_summary', sqla.JsonString),
    sa.Column('extra', sqla.JsonString),
)

reference_genome_sets = table(
    'reference_genome_sets',
    sa.Column('id', sa.Integer(), primary_key=True),
    sa.Column('signatureset_key', sa.String()),
    sa.Column('signatureset_version', sa.String()),
    sa.Column('extra', sqla.JsonString),
)

taxa = table(
    'taxa',
    sa.Column('id', sa.Integer(), primary_key=True),
    sa.Column('entrez_data', sqla.JsonString),
    sa.Column('extra', sqla.JsonString),
)


def upgrade_data(conn):
    """Migrate data from columns to be deleted my moving them to "extra" JSON column."""

    genome_rows = list(conn.execute(genomes.select()))
    for row in genome_rows:
        extra = {} if row.extra is None else row.extra.as_builtin()
        if row.entrez_summary is not None:
            extra['entrez_summary'] = row.entrez_summary.as_builtin()
        extra['ncbi_taxid'] = row.ncbi_taxid
        extra['is_assembled'] = row.is_assembled

        op.execute(genomes.update().where(genomes.c.id==row.id).values(extra=extra))

    refset_rows = list(conn.execute(reference_genome_sets.select()))
    for row in refset_rows:
        if (row.signatureset_key is not None or row.signatureset_version is not None):
            extra = {} if row.extra is None else row.extra.as_builtin()
            extra['signatureset'] = dict(key=row.signatureset_key, version=row.signatureset_version)

            op.execute(reference_genome_sets.update().where(reference_genome_sets.c.id==row.id).values(extra=extra))

    taxon_rows = list(conn.execute(taxa.select()))
    for row in taxon_rows:
        if row.entrez_data is None:
            continue

        extra = {} if row.extra is None else row.extra.as_builtin()
        extra['entrez_data'] = row.entrez_data.as_builtin()

        op.execute(taxa.update().where(taxa.c.id==row.id).values(extra=extra))


def upgrade():
    conn = op.get_bind()
    upgrade_data(conn)

    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('genomes', schema=None) as batch_op:
        batch_op.drop_index('ix_genomes_ncbi_taxid')
        batch_op.drop_column('entrez_summary')
        batch_op.drop_column('ncbi_taxid')
        batch_op.drop_column('is_assembled')

    with op.batch_alter_table('reference_genome_sets', schema=None) as batch_op:
        batch_op.drop_column('signatureset_version')
        batch_op.drop_column('signatureset_key')

    with op.batch_alter_table('taxa', schema=None) as batch_op:
        batch_op.drop_column('entrez_data')

    # ### end Alembic commands ###


def downgrade_data(conn):

    genome_rows = list(conn.execute(genomes.select()))
    for row in genome_rows:
        extra = row.extra.as_builtin()
        entrez_summary = extra.pop('enztrez_summary', None)
        ncbi_taxid = extra.pop('ncbi_taxid', None)
        is_assembled = extra.pop('is_assembled', None)

        op.execute(genomes.update().where(genomes.c.id == row.id).values(
            extra=extra,
            entrez_summary=entrez_summary,
            ncbi_taxid=ncbi_taxid,
            is_assembled=is_assembled,
        ))

    refset_rows = list(conn.execute(reference_genome_sets.select()))
    for row in refset_rows:
        extra = row.extra.as_builtin()

        if 'signatureset' in extra:
            signatureset = extra.pop('signatureset')
            op.execute(
                reference_genome_sets.update().where(reference_genome_sets.c.id == row.id).values(
                    extra=extra,
                    signatureset_key=signatureset['key'],
                    signatureset_value=signatureset['value'],
                ))

    taxon_rows = list(conn.execute(taxa.select()))
    for row in taxon_rows:
        extra = row.extra.as_builtin()
        entrez_data = extra.pop('entrez_data', None)

        op.execute(taxa.update().where(taxa.c.id == row.id).values(
            extra=extra,
            entrez_data=entrez_data,
        ))


def downgrade():

    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('taxa', schema=None) as batch_op:
        batch_op.add_column(sa.Column('entrez_data', sa.VARCHAR(), nullable=True))

    with op.batch_alter_table('reference_genome_sets', schema=None) as batch_op:
        batch_op.add_column(sa.Column('signatureset_key', sa.VARCHAR(), nullable=True))
        batch_op.add_column(sa.Column('signatureset_version', sa.VARCHAR(), nullable=True))

    with op.batch_alter_table('genomes', schema=None) as batch_op:
        batch_op.add_column(sa.Column('is_assembled', sa.BOOLEAN(), nullable=True))
        batch_op.add_column(sa.Column('ncbi_taxid', sa.INTEGER(), nullable=True))
        batch_op.add_column(sa.Column('entrez_summary', sa.VARCHAR(), nullable=True))
        batch_op.create_index('ix_genomes_ncbi_taxid', ['ncbi_taxid'], unique=False)

    # ### end Alembic commands ###

    conn = op.get_bind()
    downgrade_data(conn)
